// Generated by CoffeeScript 1.3.3
(function() {
  var Message, MessageController, TwitterController, User,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Message = require("../models/message");

  User = require("../models/user");

  exports.index = function(req, res) {
    return res.render("index", {
      title: "Express"
    });
  };

  MessageController = (function() {

    function MessageController() {}

    MessageController.prototype.actions = function() {
      return {
        annotations: this.annotations,
        search: this.search,
        update: this.update,
        "delete": this["delete"]
      };
    };

    MessageController.prototype.annotations = function(req, res) {
      if (typeof req.session.user_profile === 'undefined') {
        return res.redirect('/auth/twitter');
      }
      return User.findOne({
        id: req.session.user_profile.user_id
      }, function(err, user) {
        var ret, row;
        if (user === null || typeof user === 'undefined') {
          return res.redirect('/auth/twitter');
        } else {
          row = new Message(req.body);
          row.user_id = user.id;
          return ret = row.save(function(err) {
            if (err === null) {
              return res.send({});
            } else {
              return console.log("Err:" + err);
            }
          });
        }
      });
    };

    MessageController.prototype.search = function(req, res) {
      var query;
      query = Message.find({
        uri: req.query.uri
      });
      query.desc('updated');
      query.limit(req.query.limit);
      return query.exec(function(err, docs) {
        var ret;
        ret = {
          rows: docs
        };
        return res.send(ret);
      });
    };

    MessageController.prototype["delete"] = function(req, res) {
      if (typeof req.session.user_profile === 'undefined') {
        return res.redirect('/auth/twitter');
      }
      return User.findOne({
        id: req.session.user_profile.user_id
      }, function(err, user) {
        if (user === null || typeof user === 'undefined') {
          return res.redirect('/auth/twitter');
        } else {
          return Message.findById(req.body._id, function(err, row) {
            if (row.user_id === user.id) {
              return row.remove();
            }
          });
        }
      });
    };

    MessageController.prototype.update = function(req, res) {
      if (typeof req.session.user_profile === 'undefined') {
        return res.redirect('/auth/twitter');
      }
      return User.findOne({
        id: req.session.user_profile.user_id
      }, function(err, user) {
        if (user === null || typeof user === 'undefined') {
          return res.redirect('/auth/twitter');
        } else {
          return Message.findById(req.body._id, function(err, row) {
            var ret;
            if (row.user_id === user.id) {
              row.text = req.body.text;
              return ret = row.save(function(err) {
                if (err === null) {
                  return res.send({});
                } else {
                  return console.log("Err:" + err);
                }
              });
            }
          });
        }
      });
    };

    return MessageController;

  })();

  exports.messages = (new MessageController()).actions();

  TwitterController = (function() {

    function TwitterController() {
      this.callback = __bind(this.callback, this);

      this.twitter = __bind(this.twitter, this);

      this.consumer = __bind(this.consumer, this);
      this.oauth = require('oauth');
      this._twitterConsumerKey = "GvwdaKqJEz1GvPHajM3SZw";
      this._twitterConsumerSecret = "bhlMUCQuhoXFF1UBusb4w0f3rMGNaGpm0Hy2yNC52w";
    }

    TwitterController.prototype.consumer = function() {
      return new this.oauth.OAuth("https://twitter.com/oauth/request_token", "https://twitter.com/oauth/access_token", this._twitterConsumerKey, this._twitterConsumerSecret, "1.0A", "http://localhost:3000/auth/twitter/callback/", "HMAC-SHA1");
    };

    TwitterController.prototype.actions = function() {
      return {
        twitter: this.twitter,
        callback: this.callback
      };
    };

    TwitterController.prototype.twitter = function(req, res) {
      return this.consumer().getOAuthRequestToken(function(error, oauth_token, oauth_token_secret, results) {
        if (error) {
          return res.send(error);
        } else {
          req.session.oauth = {};
          req.session.oauth.token = oauth_token;
          req.session.oauth.token_secret = oauth_token_secret;
          return res.redirect('https://twitter.com/oauth/authenticate?oauth_token=' + oauth_token);
        }
      });
    };

    TwitterController.prototype.callback = function(req, res) {
      if (req.session.oauth) {
        req.session.oauth.verifier = req.query.oauth_verifier;
        return this.consumer().getOAuthAccessToken(req.session.oauth.token, req.session.oauth.token_secret, req.session.oauth.verifier, function(error, oauth_access_token, oauth_access_token_secret, results) {
          if (error) {
            return res.send(error);
          } else {
            req.session.oauth.access_token = oauth_access_token;
            req.session.oauth.access_token_secret = oauth_access_token_secret;
            req.session.user_profile = results;
            return User.findOne({
              id: req.session.user_profile.user_id
            }, function(err, user) {
              var http;
              if (user === null || typeof user === 'undefined') {
                user = new User();
                user.id = req.session.user_profile.user_id;
                user.oauth = req.session.oauth;
                user.user_profile = req.session.user_profile;
              }
              http = require('http');
              return http.get({
                host: 'api.twitter.com',
                path: '/1/users/show/' + user.id + '.json'
              }, function(twRes) {
                var body;
                body = '';
                twRes.on('data', function(chunk) {
                  return body += chunk.toString();
                });
                return twRes.on('end', function() {
                  user.info = JSON.parse(body);
                  user.save();
                  return res.redirect('/');
                });
              });
            });
          }
        });
      }
    };

    return TwitterController;

  })();

  exports.auth = (new TwitterController()).actions();

}).call(this);
